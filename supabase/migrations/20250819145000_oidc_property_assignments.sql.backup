-- Migration: OIDC Property Assignment Schema
-- Description: Create context_oidc_assignments table for property-granular OIDC assignments
-- Author: TrueNamePath Database Engineering
-- Date: 2025-08-19

-- =============================================================================
-- OIDC Property Assignment Table
-- =============================================================================

-- Create table for context-specific OIDC property assignments
-- Supports multiple properties per context with granular control
CREATE TABLE context_oidc_assignments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  context_id UUID NOT NULL REFERENCES user_contexts(id) ON DELETE CASCADE,
  property_type oidc_property_type_enum NOT NULL,
  name_id UUID NOT NULL REFERENCES names(id) ON DELETE CASCADE,
  visibility_level VARCHAR(20) NOT NULL DEFAULT 'STANDARD' 
CHECK (visibility_level IN ('STANDARD', 'RESTRICTED', 'PRIVATE')),
  allowed_scopes TEXT[] NOT NULL DEFAULT '{"openid","profile"}',
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  
  
  -- One property type per context (replace if exists)
  UNIQUE (context_id, property_type)
);

-- =============================================================================
-- Indexes for Performance
-- =============================================================================

CREATE INDEX idx_context_oidc_assignments_user_id 
  ON context_oidc_assignments (user_id);

CREATE INDEX idx_context_oidc_assignments_context_id 
  ON context_oidc_assignments (context_id);

CREATE INDEX idx_context_oidc_assignments_property_type 
  ON context_oidc_assignments (property_type);

CREATE INDEX idx_context_oidc_assignments_user_context 
  ON context_oidc_assignments (user_id, context_id);

CREATE INDEX idx_context_oidc_assignments_allowed_scopes_gin 
  ON context_oidc_assignments USING GIN (allowed_scopes);

-- =============================================================================
-- Row Level Security (RLS) Policies
-- =============================================================================

-- Enable RLS on the table
ALTER TABLE context_oidc_assignments ENABLE ROW LEVEL SECURITY;

-- Users can only see/manage their own OIDC assignments
CREATE POLICY "Users can view their own OIDC assignments"
  ON context_oidc_assignments
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own OIDC assignments"
  ON context_oidc_assignments
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own OIDC assignments"
  ON context_oidc_assignments
  FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own OIDC assignments"
  ON context_oidc_assignments
  FOR DELETE
  USING (auth.uid() = user_id);

-- =============================================================================
-- Helper Functions
-- =============================================================================

-- Function to get OIDC assignments for a specific context
CREATE OR REPLACE FUNCTION get_oidc_assignments_for_context(
  p_context_id UUID
)
RETURNS TABLE (
  assignment_id UUID,
  property_type oidc_property_type_enum,
  name_id UUID,
  name_text TEXT,
  visibility_level VARCHAR(20),
  allowed_scopes TEXT[],
  created_at TIMESTAMPTZ,
  updated_at TIMESTAMPTZ
)
LANGUAGE plpgsql
SECURITY INVOKER
SET search_path = public
AS $$
BEGIN
  -- Verify context ownership
  IF NOT EXISTS (
SELECT 1 FROM user_contexts 
WHERE id = p_context_id AND user_id = auth.uid()
  ) THEN
RAISE EXCEPTION 'Context not found or access denied';
  END IF;
  
  -- Return OIDC assignments for the context
  RETURN QUERY
  SELECT 
coa.id as assignment_id,
coa.property_type,
coa.name_id,
n.name_text,
coa.visibility_level,
coa.allowed_scopes,
coa.created_at,
coa.updated_at
  FROM context_oidc_assignments coa
  JOIN names n ON coa.name_id = n.id
  WHERE coa.context_id = p_context_id
AND coa.user_id = auth.uid()
  ORDER BY coa.property_type;
END;
$$;

-- Function to upsert OIDC assignment (create or update)
CREATE OR REPLACE FUNCTION upsert_oidc_assignment(
  p_context_id UUID,
  p_property_type oidc_property_type_enum,
  p_name_id UUID,
  p_visibility_level VARCHAR(20) DEFAULT 'STANDARD',
  p_allowed_scopes TEXT[] DEFAULT '{"openid","profile"}'
)
RETURNS TABLE (
  assignment_id UUID,
  property_type oidc_property_type_enum,
  name_id UUID,
  visibility_level VARCHAR(20),
  allowed_scopes TEXT[],
  operation VARCHAR(10)
)
LANGUAGE plpgsql
SECURITY INVOKER
SET search_path = public
AS $$
DECLARE
  v_user_id UUID := auth.uid();
  v_assignment_id UUID;
  v_operation VARCHAR(10);
BEGIN
  -- Verify user owns the context
  IF NOT EXISTS (
SELECT 1 FROM user_contexts 
WHERE id = p_context_id AND user_id = v_user_id
  ) THEN
RAISE EXCEPTION 'Context not found or access denied';
  END IF;
  
  -- Verify user owns the name
  IF NOT EXISTS (
SELECT 1 FROM names 
WHERE id = p_name_id AND user_id = v_user_id
  ) THEN
RAISE EXCEPTION 'Name not found or access denied';
  END IF;
  
  -- Upsert the assignment
  INSERT INTO context_oidc_assignments (
user_id, context_id, property_type, name_id, visibility_level, allowed_scopes
  )
  VALUES (
v_user_id, p_context_id, p_property_type, p_name_id, p_visibility_level, p_allowed_scopes
  )
  ON CONFLICT (context_id, property_type)
  DO UPDATE SET
name_id = EXCLUDED.name_id,
visibility_level = EXCLUDED.visibility_level,
allowed_scopes = EXCLUDED.allowed_scopes,
updated_at = now()
  RETURNING id INTO v_assignment_id;
  
  -- Determine operation type
  GET DIAGNOSTICS v_operation = PG_CONTEXT;
  IF v_operation = 'INSERT' THEN
v_operation := 'CREATED';
  ELSE
v_operation := 'UPDATED';
  END IF;
  
  -- Return the result
  RETURN QUERY
  SELECT 
v_assignment_id as assignment_id,
p_property_type as property_type,
p_name_id as name_id,
p_visibility_level as visibility_level,
p_allowed_scopes as allowed_scopes,
v_operation as operation;
END;
$$;

-- =============================================================================
-- Validation Triggers
-- =============================================================================

-- Trigger function to validate user owns context and name
CREATE OR REPLACE FUNCTION validate_context_oidc_assignments()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Verify user owns the context
  IF NOT EXISTS (
SELECT 1 FROM user_contexts 
WHERE id = NEW.context_id AND user_id = NEW.user_id
  ) THEN
RAISE EXCEPTION 'User does not own the specified context';
  END IF;
  
  -- Verify user owns the name
  IF NOT EXISTS (
SELECT 1 FROM names 
WHERE id = NEW.name_id AND user_id = NEW.user_id
  ) THEN
RAISE EXCEPTION 'User does not own the specified name';
  END IF;
  
  RETURN NEW;
END;
$$;

-- Create validation trigger
CREATE TRIGGER context_oidc_assignments_validate
  BEFORE INSERT OR UPDATE ON context_oidc_assignments
  FOR EACH ROW EXECUTE FUNCTION validate_context_oidc_assignments();

-- Create trigger function for updated_at
CREATE OR REPLACE FUNCTION update_context_oidc_assignments_updated_at()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;

-- Create trigger
CREATE TRIGGER context_oidc_assignments_updated_at
  BEFORE UPDATE ON context_oidc_assignments
  FOR EACH ROW EXECUTE FUNCTION update_context_oidc_assignments_updated_at();

-- =============================================================================
-- Comments
-- =============================================================================

COMMENT ON TABLE context_oidc_assignments IS 
'OIDC property-granular assignments for user-defined contexts - enables multiple properties per context with scope and visibility control';

COMMENT ON COLUMN context_oidc_assignments.property_type IS 
'OIDC property type (name, given_name, family_name, etc.) assigned to this context';

COMMENT ON COLUMN context_oidc_assignments.visibility_level IS 
'Visibility control: STANDARD (normal disclosure), RESTRICTED (limited scopes), PRIVATE (explicit consent required)';

COMMENT ON COLUMN context_oidc_assignments.allowed_scopes IS 
'Array of OAuth/OIDC scopes allowed to access this property in this context';

COMMENT ON FUNCTION get_oidc_assignments_for_context IS 
'Retrieve all OIDC property assignments for a user-owned context with security validation';

COMMENT ON FUNCTION upsert_oidc_assignment IS 
'Create or update OIDC property assignment with ownership validation and conflict resolution';

-- =============================================================================
-- Migration Success
-- =============================================================================

-- Log successful migration
DO $$
BEGIN
  RAISE NOTICE 'Migration 20250819000002_oidc_property_assignments completed successfully';
  RAISE NOTICE '- Created context_oidc_assignments table with RLS policies';
  RAISE NOTICE '- Added performance indexes and constraints';
  RAISE NOTICE '- Created helper functions: get_oidc_assignments_for_context(), upsert_oidc_assignment()';
  RAISE NOTICE '- Enabled property-granular OIDC assignments with visibility and scope controls';
END $$;