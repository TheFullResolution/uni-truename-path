-- =============================================================================
-- Step 15.2: OIDC Simplification - Phase 1: Remove Property Types
-- =============================================================================
-- This migration implements Phase 1 of the OIDC simplification plan.
-- Removes the forced OIDC property type selection during name creation
-- while preserving all existing data and functionality.
--
-- Changes:
-- 1. Remove NOT NULL constraint from oidc_property_type in names table
-- 2. Set default value to 'name' for new entries
-- 3. Update existing names to have generic 'name' type
-- 4. Rename property_type to oidc_claim_type in context_oidc_assignments table
-- 5. Preserve all data and maintain backward compatibility
-- =============================================================================

-- Step 1: Remove NOT NULL constraint and set default for oidc_property_type
ALTER TABLE names 
ALTER COLUMN oidc_property_type DROP NOT NULL,
ALTER COLUMN oidc_property_type SET DEFAULT 'name';

-- Step 2: Update all existing names to have generic 'name' type
-- This removes the artificial categorization that was ignored during assignment
UPDATE names 
SET oidc_property_type = 'name' 
WHERE oidc_property_type IS NOT NULL;

-- Step 3: Add migration metadata to oidc_properties for existing names
UPDATE names 
SET oidc_properties = COALESCE(oidc_properties, '{}'::jsonb) || jsonb_build_object(
  'simplified_migration', true,
  'simplified_at', NOW()::text,
  'original_property_type', oidc_property_type::text
)
WHERE oidc_properties IS NOT NULL;

-- Step 4: Rename property_type to oidc_claim_type in context_oidc_assignments table
-- This clarifies that assignments work with standard OIDC claims, not property types
DO $$
BEGIN
-- Check if the table exists and has the old column name
IF EXISTS (
SELECT 1 
FROM information_schema.columns 
WHERE table_name = 'context_oidc_assignments' 
AND column_name = 'property_type'
AND table_schema = 'public'
) THEN
-- Rename the column
ALTER TABLE context_oidc_assignments 
RENAME COLUMN property_type TO oidc_claim_type;

RAISE NOTICE 'Renamed property_type to oidc_claim_type in context_oidc_assignments';
ELSE
RAISE NOTICE 'Column property_type not found or already renamed in context_oidc_assignments';
END IF;
END $$;

-- Step 5: Update any existing functions that reference the old column name
-- Drop the existing function first to avoid return type conflicts
DROP FUNCTION IF EXISTS get_oidc_assignments_for_context(UUID, UUID);

-- Recreate the function with the new column name
CREATE OR REPLACE FUNCTION get_oidc_assignments_for_context(
  p_context_id UUID,
  p_user_id UUID DEFAULT auth.uid()
)
RETURNS TABLE (
  oidc_claim_type oidc_property_type_enum,
  name_value TEXT,
  visibility_level TEXT,
  allowed_scopes TEXT[]
)
LANGUAGE plpgsql
SECURITY INVOKER
AS $$
BEGIN
  -- Validate input
  IF p_context_id IS NULL OR p_user_id IS NULL THEN
RAISE EXCEPTION 'Context ID and User ID are required';
  END IF;
  
  -- Return assignments with name values
  RETURN QUERY
  SELECT 
coa.oidc_claim_type,
n.name_text,
coa.visibility_level,
coa.allowed_scopes
  FROM context_oidc_assignments coa
  JOIN names n ON coa.name_id = n.id
  WHERE coa.context_id = p_context_id
AND coa.user_id = p_user_id
  ORDER BY coa.oidc_claim_type;
END;
$$;

-- Step 6: Update index names for consistency
-- Drop old index and create new one with proper naming
DO $$
BEGIN
-- Drop old index if it exists
IF EXISTS (
SELECT 1 FROM pg_indexes 
WHERE indexname = 'idx_context_oidc_assignments_property_type'
AND schemaname = 'public'
) THEN
DROP INDEX idx_context_oidc_assignments_property_type;
RAISE NOTICE 'Dropped old index idx_context_oidc_assignments_property_type';
END IF;

-- Create new index with proper name
IF NOT EXISTS (
SELECT 1 FROM pg_indexes 
WHERE indexname = 'idx_context_oidc_assignments_claim_type'
AND schemaname = 'public'
) THEN
CREATE INDEX idx_context_oidc_assignments_claim_type 
ON context_oidc_assignments (oidc_claim_type);
RAISE NOTICE 'Created new index idx_context_oidc_assignments_claim_type';
END IF;
END $$;

-- Step 7: Update unique constraint to use new column name
DO $$
BEGIN
-- Drop old constraint if it exists
IF EXISTS (
SELECT 1 FROM information_schema.table_constraints 
WHERE constraint_name LIKE '%context_id%property_type%'
AND table_name = 'context_oidc_assignments'
AND table_schema = 'public'
) THEN
-- Get the actual constraint name
DECLARE
constraint_name_var TEXT;
BEGIN
SELECT constraint_name INTO constraint_name_var
FROM information_schema.table_constraints 
WHERE constraint_type = 'UNIQUE'
AND table_name = 'context_oidc_assignments'
AND table_schema = 'public'
LIMIT 1;

IF constraint_name_var IS NOT NULL THEN
EXECUTE format('ALTER TABLE context_oidc_assignments DROP CONSTRAINT %I', constraint_name_var);
RAISE NOTICE 'Dropped old unique constraint %', constraint_name_var;
END IF;
END;
END IF;

-- Create new unique constraint with proper column name
IF NOT EXISTS (
SELECT 1 FROM information_schema.table_constraints 
WHERE constraint_name = 'context_oidc_assignments_context_claim_unique'
AND table_name = 'context_oidc_assignments'
AND table_schema = 'public'
) THEN
ALTER TABLE context_oidc_assignments 
ADD CONSTRAINT context_oidc_assignments_context_claim_unique 
UNIQUE (context_id, oidc_claim_type);
RAISE NOTICE 'Created new unique constraint context_oidc_assignments_context_claim_unique';
END IF;
END $$;

-- =============================================================================
-- Migration Validation and Logging
-- =============================================================================

-- Validate the migration was successful
DO $$
DECLARE
names_count INTEGER;
assignments_count INTEGER;
generic_names_count INTEGER;
BEGIN
-- Count total names
SELECT COUNT(*) INTO names_count FROM names;

-- Count names with generic 'name' type
SELECT COUNT(*) INTO generic_names_count 
FROM names WHERE oidc_property_type = 'name';

-- Count assignments (if table exists)
IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'context_oidc_assignments') THEN
SELECT COUNT(*) INTO assignments_count FROM context_oidc_assignments;
ELSE
assignments_count := 0;
END IF;

-- Log migration results
RAISE NOTICE 'OIDC Simplification Phase 1 Migration Complete:';
RAISE NOTICE '  Total names: %', names_count;
RAISE NOTICE '  Names with generic type: %', generic_names_count;
RAISE NOTICE '  Total OIDC assignments: %', assignments_count;
RAISE NOTICE '  ✅ Property type constraint removed';
RAISE NOTICE '  ✅ Default value set to ''name''';
RAISE NOTICE '  ✅ All existing names updated to generic type';
RAISE NOTICE '  ✅ Assignment table column renamed to oidc_claim_type';
RAISE NOTICE '  ✅ Indexes and constraints updated';

-- Validate key requirements
IF generic_names_count != names_count THEN
RAISE WARNING 'Not all names were updated to generic type - manual review needed';
END IF;

-- Check that oidc_property_type is now nullable
IF EXISTS (
SELECT 1 FROM information_schema.columns 
WHERE table_name = 'names' 
AND column_name = 'oidc_property_type'
AND is_nullable = 'NO'
) THEN
RAISE EXCEPTION 'Migration failed: oidc_property_type is still NOT NULL';
END IF;

RAISE NOTICE '  ✅ Migration validation passed';
END $$;

-- =============================================================================
-- Documentation and Comments
-- =============================================================================

COMMENT ON COLUMN names.oidc_property_type IS 
'OIDC property type - now optional with default ''name''. Used for storage consistency but not enforced during creation.';

COMMENT ON TABLE context_oidc_assignments IS 
'Context-specific OIDC claim assignments. The oidc_claim_type column specifies which OIDC claim this assignment provides.';

COMMENT ON COLUMN context_oidc_assignments.oidc_claim_type IS 
'OIDC claim type (name, given_name, etc.) that this assignment provides. Renamed from property_type for clarity.';

-- Log successful completion
DO $$
BEGIN
RAISE LOG 'TrueNamePath OIDC Simplification Phase 1: COMPLETED SUCCESSFULLY';
RAISE LOG 'Migration 20250819150000_simplify_oidc_remove_property_types.sql applied';
RAISE LOG 'Next steps: Run yarn db:types to regenerate TypeScript types';
END $$;